library(ISLR)
data()
head(College)
View(College)
df <- College
library(ggplot2)
df %>% ggplot(aes(Grad.Board , Grad.Rate ))
library(dplyr)
df %>% ggplot(aes(Grad.Board , Grad.Rate ))
df %>% ggplot(aes(Room.Board , Grad.Rate ))
df %>% ggplot(aes(Room.Board , Grad.Rate )) +geom_point()
df %>% ggplot(aes(Room.Board , Grad.Rate , col= Private )) +geom_point()
df %>% ggplot(aes(F.Undergrad , fill = Pirvate))
df %>% ggplot(aes(F.Undergrad , fill = Private))
df %>% ggplot(aes(F.Undergrad , fill = Private)) + geom_histogram()
df %>% ggplot(aes(F.Undergrad , col = Private)) + geom_histogram()
df %>% ggplot(aes(F.Undergrad , col = Private , fill=Private)) + geom_histogram()
df %>% ggplot(aes(Grad.Rate  , fill=Private)) + geom_histogram()
df %>% ggplot(aes(F.Undergrad , col = Private , fill=Private)) + geom_histogram(bins=50)
df$Private <- relevel(df$Private, "Yes")
df %>% ggplot(aes(F.Undergrad , col = Private , fill=Private)) + geom_histogram(bins=50)
df %>% ggplot(aes(Grad.Rate  , fill=Private)) + geom_histogram()
rownames(df)[df$Grad.Rate>100]
df['Cazenovia College','Grad.Rate'] <- 100
library(caTools)
sample <- sample.split(df , SplitRatio = 0.7)
train = subset(df , sample=T)
test = subset(df , sample = F)
library(rpart)
model <- rpart(Private ~ ., method = 'class' , data = df )
View(model)
library(ISLR)
data()
head(College)
library(dplyr)
View(College)
df <- College
library(ggplot2)
df %>% ggplot(aes(Room.Board , Grad.Rate , col= Private )) +geom_point()
df$Private <- relevel(df$Private, "Yes")
df %>% ggplot(aes(F.Undergrad , col = Private , fill=Private)) + geom_histogram(bins=50)
df %>% ggplot(aes(Grad.Rate  , fill=Private)) + geom_histogram()
rownames(df)[df$Grad.Rate>100]
df['Cazenovia College','Grad.Rate'] <- 100
library(caTools)
sample <- sample.split(df , SplitRatio = 0.7)
train = subset(df , sample=T)
test = subset(df , sample = F)
library(rpart)
model <- rpart(Private ~ ., method = 'class' , data = train )
predict(model , data=test) ->p
p
head(p)
p <- as.data.frame(df)
p$Private <- sapply(p$Yes , j)
j <- function(x)
{
if ( x >0.5)
return('Yes')
else
return('No')
}
p$Private <- sapply(p$Yes , j)
head(p)
table(p$Private , test$Private)
p
head(p)
p <- as.data.frame(p)
head(p)
p
head(p)
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/R/projects/TREE and random forest/Tree and forset.R", echo=TRUE)
library(rpart.plot)
prp(tree)
install.packages("rpartr.plot")
library(rpart.plot)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
prp(tree)
prp(model)
library(randomForest)
install.packages("randomForest")
library(randomForest)
rf.model <- randomForest(Private ~ . , data = train , importance = T )
rf.model$confusion
table(df$Private)
rf.model$importance
p<- predic(rf.model , test)
p1<- predic(rf.model , test)
p1<- predict(rf.model , test)
table(p1 , test$Private)
table(p$Private , test$Private)
col1=c(1,45,30,35)
col2=c(33,"33,345",87,89)
col3=c("67,345",77,90,"reply")
col4=c("silver",43,23,55)
col5=c("gb","rt","dc","ty")
DF=data.frame(col1,col2,col3,col4,col5)
DF
col6=c(1,45,30,35)
col7=c(33,33345,87,89)
col8=c(67345,77,90,"")
col9=c("",43,23,55)
col10=c("gb","rt","dc","ty")
DF_Output=data.frame(col6,col7,col8,col9,col10)
DF_Output
